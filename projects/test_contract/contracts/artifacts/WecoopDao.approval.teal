#pragma version 10

// This TEAL was generated by TEALScript v0.102.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	int 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts/WecoopDao.algo.ts:28
	// this.totalPolls.value = 0
	byte 0x746f74616c506f6c6c73 // "totalPolls"
	int 0
	app_global_put

	// contracts/WecoopDao.algo.ts:29
	// this.totalVotes.value = 0
	byte 0x746f74616c566f746573 // "totalVotes"
	int 0
	app_global_put
	retsub

// optinToAsset(pay,uint64)void
*abi_route_optinToAsset:
	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// mbrTxn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 1 (mbrTxn) for optinToAsset must be a pay transaction
	assert

	// execute optinToAsset(pay,uint64)void
	callsub optinToAsset
	int 1
	return

// optinToAsset(mbrTxn: PayTxn, asset: AssetID): void
optinToAsset:
	proto 2 0

	// contracts/WecoopDao.algo.ts:35
	// assert(this.txn.sender === this.app.creator, 'Error: Not the creator trying to optin to an asset')
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// Error: Not the creator trying to optin to an asset
	assert

	// contracts/WecoopDao.algo.ts:38
	// assert(mbrTxn.receiver === this.app.address, 'Receiver is not the app address')
	frame_dig -1 // mbrTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// Receiver is not the app address
	assert

	// contracts/WecoopDao.algo.ts:41
	// assert(!this.app.address.isOptedInToAsset(asset))
	global CurrentApplicationAddress
	frame_dig -2 // asset: AssetID
	asset_holding_get AssetBalance
	swap
	pop
	!
	assert

	// contracts/WecoopDao.algo.ts:44
	// verifyPayTxn(mbrTxn, { amount: { greaterThanEqualTo: globals.minBalance + globals.assetOptInMinBalance } })
	// verify amount
	frame_dig -1 // mbrTxn: PayTxn
	gtxns Amount
	global MinBalance
	global AssetOptInMinBalance
	+
	>=

	// transaction verification failed: {"txn":"mbrTxn","field":"amount","condition":"greaterThanEqualTo","expected":">=globals.minBalance + globals.assetOptInMinBalance"}
	assert

	// contracts/WecoopDao.algo.ts:47
	// sendAssetTransfer({ assetReceiver: this.app.address, assetAmount: 0, xferAsset: asset })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/WecoopDao.algo.ts:47
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/WecoopDao.algo.ts:47
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/WecoopDao.algo.ts:47
	// xferAsset: asset
	frame_dig -2 // asset: AssetID
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// createPoll(pay,axfer,string)(address,uint64,string,uint64,uint64,uint64)
*abi_route_createPoll:
	// The ABI return prefix
	byte 0x151f7c75

	// question: string
	txna ApplicationArgs 1
	extract 2 0

	// axfer: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 1 (axfer) for createPoll must be a axfer transaction
	assert

	// mbrTxn: pay
	txn GroupIndex
	int 2
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 2 (mbrTxn) for createPoll must be a pay transaction
	assert

	// execute createPoll(pay,axfer,string)(address,uint64,string,uint64,uint64,uint64)
	callsub createPoll
	concat
	log
	int 1
	return

// createPoll(mbrTxn: PayTxn, axfer: AssetTransferTxn, question: string): PollInfo
createPoll:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 4

	// contracts/WecoopDao.algo.ts:55
	// assert(this.app.address.isOptedInToAsset(axfer.xferAsset), 'Application not opted in to the asset')
	global CurrentApplicationAddress
	frame_dig -2 // axfer: AssetTransferTxn
	gtxns XferAsset
	asset_holding_get AssetBalance
	swap
	pop

	// Application not opted in to the asset
	assert

	// contracts/WecoopDao.algo.ts:58
	// assert(axfer.assetReceiver === this.app.address, 'Deposit transaction not to the app wallet')
	frame_dig -2 // axfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// Deposit transaction not to the app wallet
	assert

	// contracts/WecoopDao.algo.ts:61
	// creatorAddress: Address = axfer.sender
	frame_dig -2 // axfer: AssetTransferTxn
	gtxns Sender
	frame_bury 0 // creatorAddress: Address

	// contracts/WecoopDao.algo.ts:64
	// currentNonce: uint64 = this.totalPolls.value
	byte 0x746f74616c506f6c6c73 // "totalPolls"
	app_global_get
	frame_bury 1 // currentNonce: uint64

	// contracts/WecoopDao.algo.ts:67
	// newNonce: uint64 = currentNonce === 0 ? currentNonce + 1 : 0
	frame_dig 1 // currentNonce: uint64
	int 0
	==
	bz *ternary0_false
	frame_dig 1 // currentNonce: uint64
	int 1
	+
	b *ternary0_end

*ternary0_false:
	int 0

*ternary0_end:
	frame_bury 2 // newNonce: uint64

	// contracts/WecoopDao.algo.ts:70
	// assert(!this.poll({ nonce: newNonce }).exists, 'This poll already exists!')
	byte 0x706f6c6c5f // "poll_"
	frame_dig 2 // newNonce: uint64
	itob
	concat
	box_len
	swap
	pop
	!

	// This poll already exists!
	assert

	// contracts/WecoopDao.algo.ts:73
	// verifyPayTxn(mbrTxn, { amount: pollMbr })
	// verify amount
	frame_dig -1 // mbrTxn: PayTxn
	gtxns Amount
	int 3450
	==

	// transaction verification failed: {"txn":"mbrTxn","field":"amount","expected":"pollMbr"}
	assert

	// contracts/WecoopDao.algo.ts:76
	// this.totalPolls.value += 1
	byte 0x746f74616c506f6c6c73 // "totalPolls"
	app_global_get
	int 1
	+
	byte 0x746f74616c506f6c6c73 // "totalPolls"
	swap
	app_global_put

	// contracts/WecoopDao.algo.ts:79
	// deposited = axfer.assetAmount
	frame_dig -2 // axfer: AssetTransferTxn
	gtxns AssetAmount
	frame_bury 3 // deposited: uint64

	// contracts/WecoopDao.algo.ts:80
	// selecteAsset = axfer.xferAsset
	frame_dig -2 // axfer: AssetTransferTxn
	gtxns XferAsset
	frame_bury 4 // selecteAsset: uint64

	// contracts/WecoopDao.algo.ts:83
	// this.poll({ nonce: newNonce }).value = {
	//       question: question,
	//       creator: creatorAddress,
	//       totalVotes: 0,
	//       yesVotes: 0,
	//       deposited: deposited,
	//       selected_asset: selecteAsset,
	//     }
	byte 0x706f6c6c5f // "poll_"
	frame_dig 2 // newNonce: uint64
	itob
	concat
	dup
	box_del
	pop
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0042 // initial head offset
	frame_dig 0 // creatorAddress: Address
	callsub *process_static_tuple_element
	frame_dig 4 // selecteAsset: uint64
	itob
	callsub *process_static_tuple_element
	frame_dig -3 // question: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	byte 0x0000000000000000
	callsub *process_static_tuple_element
	byte 0x0000000000000000
	callsub *process_static_tuple_element
	frame_dig 3 // deposited: uint64
	itob
	callsub *process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	box_put

	// contracts/WecoopDao.algo.ts:93
	// return this.poll({ nonce: newNonce }).value;
	byte 0x706f6c6c5f // "poll_"
	frame_dig 2 // newNonce: uint64
	itob
	concat
	box_get

	// box value does not exist: this.poll({ nonce: newNonce }).value
	assert

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 4
	retsub

// getPollById((uint64))(address,uint64,string,uint64,uint64,uint64)
*abi_route_getPollById:
	// The ABI return prefix
	byte 0x151f7c75

	// pollId: (uint64)
	txna ApplicationArgs 1
	dup
	len
	int 8
	==

	// argument 0 (pollId) for getPollById must be a (uint64)
	assert

	// execute getPollById((uint64))(address,uint64,string,uint64,uint64,uint64)
	callsub getPollById
	concat
	log
	int 1
	return

// getPollById(pollId: PollId): PollInfo
getPollById:
	proto 1 1

	// contracts/WecoopDao.algo.ts:97
	// assert(this.poll(pollId).exists, 'Searched poll does not exist')
	byte 0x706f6c6c5f // "poll_"
	frame_dig -1 // pollId: PollId
	concat
	box_len
	swap
	pop

	// Searched poll does not exist
	assert

	// contracts/WecoopDao.algo.ts:98
	// return this.poll(pollId).value;
	byte 0x706f6c6c5f // "poll_"
	frame_dig -1 // pollId: PollId
	concat
	box_get

	// box value does not exist: this.poll(pollId).value
	assert
	retsub

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "optinToAsset(pay,uint64)void"
	method "createPoll(pay,axfer,string)(address,uint64,string,uint64,uint64,uint64)"
	method "getPollById((uint64))(address,uint64,string,uint64,uint64,uint64)"
	txna ApplicationArgs 0
	match *abi_route_optinToAsset *abi_route_createPoll *abi_route_getPollById

	// this contract does not implement the given ABI method for call NoOp
	err

*process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub