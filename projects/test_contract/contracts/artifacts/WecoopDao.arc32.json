{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "optinToAsset(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createPoll(pay,axfer,string)(address,uint64,string,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getPollById((uint64))(address,uint64,string,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "totalPolls": {
          "type": "uint64",
          "key": "totalPolls"
        },
        "totalVotes": {
          "type": "uint64",
          "key": "totalVotes"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "WecoopDao",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optinToAsset",
        "args": [
          {
            "name": "mbrTxn",
            "type": "pay"
          },
          {
            "name": "asset",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createPoll",
        "args": [
          {
            "name": "mbrTxn",
            "type": "pay"
          },
          {
            "name": "axfer",
            "type": "axfer"
          },
          {
            "name": "question",
            "type": "string"
          }
        ],
        "returns": {
          "type": "(address,uint64,string,uint64,uint64,uint64)"
        }
      },
      {
        "name": "getPollById",
        "args": [
          {
            "name": "pollId",
            "type": "(uint64)"
          }
        ],
        "returns": {
          "type": "(address,uint64,string,uint64,uint64,uint64)"
        }
      }
    ]
  }
}