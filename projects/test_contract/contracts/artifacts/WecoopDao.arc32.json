{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "optinToAsset(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createPoll(pay,axfer,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "makeVote((uint64),axfer,pay,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdrawPollShare((uint64))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getPollByPollId((uint64))(address,uint64,string,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getVoteByVoteId((uint64,(uint64)))(bool,address)": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "totalPolls": {
          "type": "uint64",
          "key": "totalPolls"
        },
        "totalVotes": {
          "type": "uint64",
          "key": "totalVotes"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "WecoopDao",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optinToAsset",
        "args": [
          {
            "name": "mbrTxn",
            "type": "pay"
          },
          {
            "name": "asset",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createPoll",
        "args": [
          {
            "name": "mbrTxn",
            "type": "pay"
          },
          {
            "name": "axfer",
            "type": "axfer"
          },
          {
            "name": "question",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "makeVote",
        "args": [
          {
            "name": "pollId",
            "type": "(uint64)"
          },
          {
            "name": "axfer",
            "type": "axfer"
          },
          {
            "name": "mbrTxn",
            "type": "pay"
          },
          {
            "name": "inFavor",
            "type": "bool"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "withdrawPollShare",
        "args": [
          {
            "name": "poolId",
            "type": "(uint64)"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getPollByPollId",
        "args": [
          {
            "name": "pollId",
            "type": "(uint64)"
          }
        ],
        "returns": {
          "type": "(address,uint64,string,uint64,uint64,uint64)"
        }
      },
      {
        "name": "getVoteByVoteId",
        "args": [
          {
            "name": "voteId",
            "type": "(uint64,(uint64))"
          }
        ],
        "returns": {
          "type": "(bool,address)"
        }
      }
    ]
  }
}