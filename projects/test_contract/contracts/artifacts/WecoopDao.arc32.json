{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "optinToAsset(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createPoll(pay,axfer,axfer,string,string,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "makeVote((uint64),axfer,pay,bool,axfer,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdrawPollShare((uint64))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getPollByPollId((uint64))(address,uint64,uint64,uint64,uint64,uint64,uint64,string,string)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getVoteByVoteId(((uint64),address))(uint64,address)": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "totalPolls": {
          "type": "uint64",
          "key": "totalPolls"
        },
        "totalVotes": {
          "type": "uint64",
          "key": "totalVotes"
        },
        "wecoop_main_address": {
          "type": "bytes",
          "key": "DZ6ZKA6STPVTPCTGN2DO5J5NUYEETWOIB7XVPSJ4F3N2QZQTNS3Q7VIXCM"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "WecoopDao",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optinToAsset",
        "args": [
          {
            "name": "mbrTxn",
            "type": "pay"
          },
          {
            "name": "asset",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createPoll",
        "args": [
          {
            "name": "mbrTxn",
            "type": "pay"
          },
          {
            "name": "axfer",
            "type": "axfer"
          },
          {
            "name": "platformFeeTxn",
            "type": "axfer"
          },
          {
            "name": "question",
            "type": "string"
          },
          {
            "name": "country",
            "type": "string"
          },
          {
            "name": "expires_in",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "makeVote",
        "args": [
          {
            "name": "pollId",
            "type": "(uint64)"
          },
          {
            "name": "axfer",
            "type": "axfer"
          },
          {
            "name": "mbrTxn",
            "type": "pay"
          },
          {
            "name": "inFavor",
            "type": "bool"
          },
          {
            "name": "platrformFeeTxn",
            "type": "axfer"
          },
          {
            "name": "creatorFeeTxn",
            "type": "axfer"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "withdrawPollShare",
        "args": [
          {
            "name": "pollId",
            "type": "(uint64)"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getPollByPollId",
        "args": [
          {
            "name": "pollId",
            "type": "(uint64)"
          }
        ],
        "returns": {
          "type": "(address,uint64,uint64,uint64,uint64,uint64,uint64,string,string)"
        }
      },
      {
        "name": "getVoteByVoteId",
        "args": [
          {
            "name": "voteId",
            "type": "((uint64),address)"
          }
        ],
        "returns": {
          "type": "(uint64,address)"
        }
      }
    ]
  }
}