/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "optinToAsset(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createPoll(pay,axfer,axfer,string,string,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "makeVote((uint64),axfer,pay,bool,axfer,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdrawPollShare((uint64))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getPollByPollId((uint64))(address,uint64,uint64,uint64,uint64,uint64,uint64,string,string)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getVoteByVoteId(((uint64),address))(uint64,address)": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "totalPolls": {
          "type": "uint64",
          "key": "totalPolls"
        },
        "totalVotes": {
          "type": "uint64",
          "key": "totalVotes"
        },
        "wecoop_main_address": {
          "type": "bytes",
          "key": "DZ6ZKA6STPVTPCTGN2DO5J5NUYEETWOIB7XVPSJ4F3N2QZQTNS3Q7VIXCM"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "WecoopDao",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optinToAsset",
        "args": [
          {
            "name": "mbrTxn",
            "type": "pay"
          },
          {
            "name": "asset",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createPoll",
        "args": [
          {
            "name": "mbrTxn",
            "type": "pay"
          },
          {
            "name": "axfer",
            "type": "axfer"
          },
          {
            "name": "platformFeeTxn",
            "type": "axfer"
          },
          {
            "name": "question",
            "type": "string"
          },
          {
            "name": "country",
            "type": "string"
          },
          {
            "name": "expires_in",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "makeVote",
        "args": [
          {
            "name": "pollId",
            "type": "(uint64)"
          },
          {
            "name": "axfer",
            "type": "axfer"
          },
          {
            "name": "mbrTxn",
            "type": "pay"
          },
          {
            "name": "inFavor",
            "type": "bool"
          },
          {
            "name": "platrformFeeTxn",
            "type": "axfer"
          },
          {
            "name": "creatorFeeTxn",
            "type": "axfer"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "withdrawPollShare",
        "args": [
          {
            "name": "pollId",
            "type": "(uint64)"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getPollByPollId",
        "args": [
          {
            "name": "pollId",
            "type": "(uint64)"
          }
        ],
        "returns": {
          "type": "(address,uint64,uint64,uint64,uint64,uint64,uint64,string,string)"
        }
      },
      {
        "name": "getVoteByVoteId",
        "args": [
          {
            "name": "voteId",
            "type": "((uint64),address)"
          }
        ],
        "returns": {
          "type": "(uint64,address)"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the WecoopDao smart contract.
 */
export type WecoopDao = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'optinToAsset(pay,uint64)void' | 'optinToAsset', {
      argsObj: {
        mbrTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        asset: bigint | number
      }
      argsTuple: [mbrTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, asset: bigint | number]
      returns: void
    }>
    & Record<'createPoll(pay,axfer,axfer,string,string,uint64)void' | 'createPoll', {
      argsObj: {
        mbrTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>
        platformFeeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        question: string
        country: string
        expires_in: bigint | number
      }
      argsTuple: [mbrTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>, platformFeeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, question: string, country: string, expires_in: bigint | number]
      returns: void
    }>
    & Record<'makeVote((uint64),axfer,pay,bool,axfer,axfer)void' | 'makeVote', {
      argsObj: {
        pollId: [bigint | number]
        axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>
        mbrTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        inFavor: boolean
        platrformFeeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        creatorFeeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [pollId: [bigint | number], axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>, mbrTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, inFavor: boolean, platrformFeeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>, creatorFeeTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'withdrawPollShare((uint64))void' | 'withdrawPollShare', {
      argsObj: {
        pollId: [bigint | number]
      }
      argsTuple: [pollId: [bigint | number]]
      returns: void
    }>
    & Record<'getPollByPollId((uint64))(address,uint64,uint64,uint64,uint64,uint64,uint64,string,string)' | 'getPollByPollId', {
      argsObj: {
        pollId: [bigint | number]
      }
      argsTuple: [pollId: [bigint | number]]
      returns: [string, bigint, bigint, bigint, bigint, bigint, bigint, string, string]
    }>
    & Record<'getVoteByVoteId(((uint64),address))(uint64,address)' | 'getVoteByVoteId', {
      argsObj: {
        voteId: [[bigint | number], string]
      }
      argsTuple: [voteId: [[bigint | number], string]]
      returns: [bigint, string]
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'totalPolls'?: IntegerState
      'totalVotes'?: IntegerState
      'DZ6ZKA6STPVTPCTGN2DO5J5NUYEETWOIB7XVPSJ4F3N2QZQTNS3Q7VIXCM'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type WecoopDaoSig = keyof WecoopDao['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends WecoopDaoSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the WecoopDao smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends WecoopDaoSig> = WecoopDao['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the WecoopDao smart contract to the method's return type
 */
export type MethodReturn<TSignature extends WecoopDaoSig> = WecoopDao['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type WecoopDaoCreateCalls = (typeof WecoopDaoCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type WecoopDaoCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type WecoopDaoDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: WecoopDaoCreateCalls) => WecoopDaoCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class WecoopDaoCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the WecoopDao smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the optinToAsset(pay,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optinToAsset(args: MethodArgs<'optinToAsset(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'optinToAsset(pay,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbrTxn, args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createPoll(pay,axfer,axfer,string,string,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createPoll(args: MethodArgs<'createPoll(pay,axfer,axfer,string,string,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createPoll(pay,axfer,axfer,string,string,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbrTxn, args.axfer, args.platformFeeTxn, args.question, args.country, args.expires_in],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the makeVote((uint64),axfer,pay,bool,axfer,axfer)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static makeVote(args: MethodArgs<'makeVote((uint64),axfer,pay,bool,axfer,axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'makeVote((uint64),axfer,pay,bool,axfer,axfer)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.pollId, args.axfer, args.mbrTxn, args.inFavor, args.platrformFeeTxn, args.creatorFeeTxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdrawPollShare((uint64))void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdrawPollShare(args: MethodArgs<'withdrawPollShare((uint64))void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdrawPollShare((uint64))void' as const,
      methodArgs: Array.isArray(args) ? args : [args.pollId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getPollByPollId((uint64))(address,uint64,uint64,uint64,uint64,uint64,uint64,string,string) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getPollByPollId(args: MethodArgs<'getPollByPollId((uint64))(address,uint64,uint64,uint64,uint64,uint64,uint64,string,string)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getPollByPollId((uint64))(address,uint64,uint64,uint64,uint64,uint64,uint64,string,string)' as const,
      methodArgs: Array.isArray(args) ? args : [args.pollId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getVoteByVoteId(((uint64),address))(uint64,address) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getVoteByVoteId(args: MethodArgs<'getVoteByVoteId(((uint64),address))(uint64,address)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getVoteByVoteId(((uint64),address))(uint64,address)' as const,
      methodArgs: Array.isArray(args) ? args : [args.voteId],
      ...params,
    }
  }
}

/**
 * A client to make calls to the WecoopDao smart contract
 */
export class WecoopDaoClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `WecoopDaoClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof WecoopDao['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the WecoopDao smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: WecoopDaoDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(WecoopDaoCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the WecoopDao smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(WecoopDaoCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the WecoopDao smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the optinToAsset(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optinToAsset(args: MethodArgs<'optinToAsset(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(WecoopDaoCallFactory.optinToAsset(args, params))
  }

  /**
   * Calls the createPoll(pay,axfer,axfer,string,string,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createPoll(args: MethodArgs<'createPoll(pay,axfer,axfer,string,string,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(WecoopDaoCallFactory.createPoll(args, params))
  }

  /**
   * Calls the makeVote((uint64),axfer,pay,bool,axfer,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public makeVote(args: MethodArgs<'makeVote((uint64),axfer,pay,bool,axfer,axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(WecoopDaoCallFactory.makeVote(args, params))
  }

  /**
   * Calls the withdrawPollShare((uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdrawPollShare(args: MethodArgs<'withdrawPollShare((uint64))void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(WecoopDaoCallFactory.withdrawPollShare(args, params))
  }

  /**
   * Calls the getPollByPollId((uint64))(address,uint64,uint64,uint64,uint64,uint64,uint64,string,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getPollByPollId(args: MethodArgs<'getPollByPollId((uint64))(address,uint64,uint64,uint64,uint64,uint64,uint64,string,string)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(WecoopDaoCallFactory.getPollByPollId(args, params))
  }

  /**
   * Calls the getVoteByVoteId(((uint64),address))(uint64,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getVoteByVoteId(args: MethodArgs<'getVoteByVoteId(((uint64),address))(uint64,address)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(WecoopDaoCallFactory.getVoteByVoteId(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<WecoopDao['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get totalPolls() {
        return WecoopDaoClient.getIntegerState(state, 'totalPolls')
      },
      get totalVotes() {
        return WecoopDaoClient.getIntegerState(state, 'totalVotes')
      },
      get DZ6ZKA6STPVTPCTGN2DO5J5NUYEETWOIB7XVPSJ4F3N2QZQTNS3Q7VIXCM() {
        return WecoopDaoClient.getBinaryState(state, 'DZ6ZKA6STPVTPCTGN2DO5J5NUYEETWOIB7XVPSJ4F3N2QZQTNS3Q7VIXCM')
      },
    }
  }

  public compose(): WecoopDaoComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      optinToAsset(args: MethodArgs<'optinToAsset(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.optinToAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createPoll(args: MethodArgs<'createPoll(pay,axfer,axfer,string,string,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createPoll(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      makeVote(args: MethodArgs<'makeVote((uint64),axfer,pay,bool,axfer,axfer)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.makeVote(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdrawPollShare(args: MethodArgs<'withdrawPollShare((uint64))void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdrawPollShare(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getPollByPollId(args: MethodArgs<'getPollByPollId((uint64))(address,uint64,uint64,uint64,uint64,uint64,uint64,string,string)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getPollByPollId(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getVoteByVoteId(args: MethodArgs<'getVoteByVoteId(((uint64),address))(uint64,address)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getVoteByVoteId(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as WecoopDaoComposer
  }
}
export type WecoopDaoComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the optinToAsset(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optinToAsset(args: MethodArgs<'optinToAsset(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): WecoopDaoComposer<[...TReturns, MethodReturn<'optinToAsset(pay,uint64)void'>]>

  /**
   * Calls the createPoll(pay,axfer,axfer,string,string,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createPoll(args: MethodArgs<'createPoll(pay,axfer,axfer,string,string,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): WecoopDaoComposer<[...TReturns, MethodReturn<'createPoll(pay,axfer,axfer,string,string,uint64)void'>]>

  /**
   * Calls the makeVote((uint64),axfer,pay,bool,axfer,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  makeVote(args: MethodArgs<'makeVote((uint64),axfer,pay,bool,axfer,axfer)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): WecoopDaoComposer<[...TReturns, MethodReturn<'makeVote((uint64),axfer,pay,bool,axfer,axfer)void'>]>

  /**
   * Calls the withdrawPollShare((uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawPollShare(args: MethodArgs<'withdrawPollShare((uint64))void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): WecoopDaoComposer<[...TReturns, MethodReturn<'withdrawPollShare((uint64))void'>]>

  /**
   * Calls the getPollByPollId((uint64))(address,uint64,uint64,uint64,uint64,uint64,uint64,string,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPollByPollId(args: MethodArgs<'getPollByPollId((uint64))(address,uint64,uint64,uint64,uint64,uint64,uint64,string,string)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): WecoopDaoComposer<[...TReturns, MethodReturn<'getPollByPollId((uint64))(address,uint64,uint64,uint64,uint64,uint64,uint64,string,string)'>]>

  /**
   * Calls the getVoteByVoteId(((uint64),address))(uint64,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVoteByVoteId(args: MethodArgs<'getVoteByVoteId(((uint64),address))(uint64,address)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): WecoopDaoComposer<[...TReturns, MethodReturn<'getVoteByVoteId(((uint64),address))(uint64,address)'>]>

  /**
   * Makes a clear_state call to an existing instance of the WecoopDao smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): WecoopDaoComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): WecoopDaoComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<WecoopDaoComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<WecoopDaoComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type WecoopDaoComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type WecoopDaoComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
