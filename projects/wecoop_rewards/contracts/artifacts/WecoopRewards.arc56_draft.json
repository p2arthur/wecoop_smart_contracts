{
  "name": "WecoopRewards",
  "desc": "",
  "methods": [
    {
      "name": "bootstrap",
      "args": [
        {
          "name": "mbrTxn",
          "type": "pay"
        },
        {
          "name": "asset",
          "type": "uint64"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "initiateRewardCycle",
      "args": [
        {
          "name": "axfer",
          "type": "axfer"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "createPost",
      "args": [
        {
          "name": "axfer",
          "type": "axfer"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "createApplication",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [
          "NoOp"
        ],
        "call": []
      }
    }
  ],
  "arcs": [
    4,
    56
  ],
  "structs": {},
  "state": {
    "schema": {
      "global": {
        "bytes": 1,
        "ints": 3
      },
      "local": {
        "bytes": 1,
        "ints": 0
      }
    },
    "keys": {
      "global": {
        "wecoop_token": {
          "key": "d2Vjb29wX3Rva2Vu",
          "keyType": "AVMBytes",
          "valueType": "uint64"
        },
        "wecoop_main_address": {
          "key": "RFo2WktBNlNUUFZUUENUR04yRE81SjVOVVlFRVRXT0lCN1hWUFNKNEYzTjJRWlFUTlMzUTdWSVhDTQ==",
          "keyType": "AVMBytes",
          "valueType": "address"
        },
        "reward_cycle": {
          "key": "cmV3YXJkX2N5Y2xl",
          "keyType": "AVMBytes",
          "valueType": "uint64"
        },
        "total_rewards": {
          "key": "dG90YWxfcmV3YXJkcw==",
          "keyType": "AVMBytes",
          "valueType": "uint64"
        }
      },
      "local": {
        "user": {
          "key": "dXNlcg==",
          "keyType": "AVMBytes",
          "valueType": "(uint64,uint64,uint64,uint64,uint64)"
        }
      },
      "box": {}
    },
    "maps": {
      "global": {},
      "local": {},
      "box": {}
    }
  },
  "bareActions": {
    "create": [],
    "call": []
  },
  "sourceInfo": {
    "approval": {
      "sourceInfo": [
        {
          "pc": [
            86
          ],
          "errorMessage": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
        },
        {
          "pc": [
            102
          ],
          "errorMessage": "argument 1 (mbrTxn) for bootstrap must be a pay transaction"
        },
        {
          "pc": [
            121
          ],
          "errorMessage": "Error: Not the creator trying to optin to an asset"
        },
        {
          "pc": [
            129
          ],
          "errorMessage": "Receiver is not the app address"
        },
        {
          "pc": [
            150
          ],
          "errorMessage": "transaction verification failed: {\"txn\":\"mbrTxn\",\"field\":\"amount\",\"condition\":\"greaterThanEqualTo\",\"expected\":\">=globals.minBalance + globals.assetOptInMinBalance\"}"
        },
        {
          "pc": [
            202
          ],
          "errorMessage": "argument 0 (axfer) for initiateRewardCycle must be a axfer transaction"
        },
        {
          "pc": [
            323
          ],
          "errorMessage": "argument 0 (axfer) for createPost must be a axfer transaction"
        },
        {
          "pc": [
            451
          ],
          "errorMessage": "this contract does not implement the given ABI method for create NoOp"
        },
        {
          "pc": [
            481
          ],
          "errorMessage": "this contract does not implement the given ABI method for call NoOp"
        }
      ],
      "pcOffsetMethod": "none"
    },
    "clear": {
      "sourceInfo": [],
      "pcOffsetMethod": "none"
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "byteCode": {
    "approval": "CiABASYEDXRvdGFsX3Jld2FyZHMMd2Vjb29wX3Rva2VuDHJld2FyZF9jeWNsZQR2b3RlMRgUgQYLMRkIjQwBbgAAAAAAAAAAAAABYAAAAAAAAAAAAAAANhoBFzEWgQEJSTgQgQESRIgAA4EBQ4oCADEANjIAcgdIEkSL/zgHMgoSRDIKi/5wAExIFESL/zgIMgEyEAgPRIAMd2Vjb29wX3Rva2Vui/5nsYEEshAyCrIUgQCyEov+shGBALIBs4kxFoEBCUk4EIEEEkSIAAOBAUOKAQCAAIv/OBGADHdlY29vcF90b2tlbmQSRIAMcmV3YXJkX2N5Y2xlZIEBCIAMcmV3YXJkX2N5Y2xlTGeL/zgSjACADXRvdGFsX3Jld2FyZHNkiwAIgA10b3RhbF9yZXdhcmRzTGeJMRaBAQlJOBCBBBJEiAADgQFDigEAi/84FIA6RFo2WktBNlNUUFZUUENUR04yRE81SjVOVVlFRVRXT0lCN1hWUFNKNEYzTjJRWlFUTlMzUTdWSVhDTWQSRIAEdm90ZYgAAYmKAQGL/4AEdm90ZRJBAAaBAYlCAAOBAImJgQFDgAS4RHs2NhoAjgH/8ACABB4yAZqABNILQVCABLQQs902GgCOA/52/t7/VwA=",
    "clear": "Cg=="
  },
  "compilerInfo": {
    "compiler": "algod",
    "compilerVersion": {
      "major": 3,
      "minor": 25,
      "patch": 0,
      "commitHash": "9855f57c"
    }
  }
}