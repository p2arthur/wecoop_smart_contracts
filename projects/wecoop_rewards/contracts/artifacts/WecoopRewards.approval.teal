#pragma version 10
bytecblock 0x746f74616c5f72657761726473 0x7765636f6f705f746f6b656e 0x7265776172645f6379636c65

// This TEAL was generated by TEALScript v0.104.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// bootstrap(pay,uint64)void
*abi_route_bootstrap:
	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// mbrTxn: pay
	txn GroupIndex
	pushint 1
	-
	dup
	gtxns TypeEnum
	pushint 1 // pay
	==

	// argument 1 (mbrTxn) for bootstrap must be a pay transaction
	assert

	// execute bootstrap(pay,uint64)void
	callsub bootstrap
	pushint 1
	return

// bootstrap(mbrTxn: PayTxn, asset: AssetID): void
bootstrap:
	proto 2 0

	// contracts/WecoopRewards.algo.ts:23
	// assert(this.txn.sender === this.app.creator, 'Error: Not the creator trying to optin to an asset')
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// Error: Not the creator trying to optin to an asset
	assert

	// contracts/WecoopRewards.algo.ts:26
	// assert(mbrTxn.receiver === this.app.address, 'Receiver is not the app address')
	frame_dig -1 // mbrTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// Receiver is not the app address
	assert

	// contracts/WecoopRewards.algo.ts:29
	// assert(!this.app.address.isOptedInToAsset(asset))
	global CurrentApplicationAddress
	frame_dig -2 // asset: AssetID
	asset_holding_get AssetBalance
	swap
	pop
	!
	assert

	// contracts/WecoopRewards.algo.ts:32
	// verifyPayTxn(mbrTxn, { amount: { greaterThanEqualTo: globals.minBalance + globals.assetOptInMinBalance } })
	// verify amount
	frame_dig -1 // mbrTxn: PayTxn
	gtxns Amount
	global MinBalance
	global AssetOptInMinBalance
	+
	>=

	// transaction verification failed: {"txn":"mbrTxn","field":"amount","condition":"greaterThanEqualTo","expected":">=globals.minBalance + globals.assetOptInMinBalance"}
	assert

	// contracts/WecoopRewards.algo.ts:34
	// this.wecoop_token.value = asset
	byte 0x7765636f6f705f746f6b656e // "wecoop_token"
	frame_dig -2 // asset: AssetID
	app_global_put

	// contracts/WecoopRewards.algo.ts:37
	// sendAssetTransfer({ assetReceiver: this.app.address, assetAmount: 0, xferAsset: asset })
	itxn_begin
	pushint 4 // axfer
	itxn_field TypeEnum

	// contracts/WecoopRewards.algo.ts:37
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/WecoopRewards.algo.ts:37
	// assetAmount: 0
	pushint 0
	itxn_field AssetAmount

	// contracts/WecoopRewards.algo.ts:37
	// xferAsset: asset
	frame_dig -2 // asset: AssetID
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	pushint 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// initiateRewardCycle(axfer)void
*abi_route_initiateRewardCycle:
	// axfer: axfer
	txn GroupIndex
	pushint 1
	-
	dup
	gtxns TypeEnum
	pushint 4 // axfer
	==

	// argument 0 (axfer) for initiateRewardCycle must be a axfer transaction
	assert

	// execute initiateRewardCycle(axfer)void
	callsub initiateRewardCycle
	pushint 1
	return

// initiateRewardCycle(axfer: AssetTransferTxn): void
initiateRewardCycle:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	pushbytes 0x

	// contracts/WecoopRewards.algo.ts:48
	// assert(axfer.xferAsset === this.wecoop_token.value)
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns XferAsset
	byte 0x7765636f6f705f746f6b656e // "wecoop_token"
	app_global_get
	==
	assert

	// contracts/WecoopRewards.algo.ts:51
	// this.reward_cycle.value += 1
	byte 0x7265776172645f6379636c65 // "reward_cycle"
	app_global_get
	pushint 1
	+
	byte 0x7265776172645f6379636c65 // "reward_cycle"
	swap
	app_global_put

	// contracts/WecoopRewards.algo.ts:54
	// depositedAmount: uint64 = axfer.assetAmount
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns AssetAmount
	frame_bury 0 // depositedAmount: uint64

	// contracts/WecoopRewards.algo.ts:56
	// this.total_rewards.value += depositedAmount
	byte 0x746f74616c5f72657761726473 // "total_rewards"
	app_global_get
	frame_dig 0 // depositedAmount: uint64
	+
	byte 0x746f74616c5f72657761726473 // "total_rewards"
	swap
	app_global_put
	retsub

*abi_route_createApplication:
	pushint 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x1e32019a // method "bootstrap(pay,uint64)void"
	pushbytes 0xd20b4150 // method "initiateRewardCycle(axfer)void"
	txna ApplicationArgs 0
	match *abi_route_bootstrap *abi_route_initiateRewardCycle

	// this contract does not implement the given ABI method for call NoOp
	err