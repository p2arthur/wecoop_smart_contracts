#pragma version 10
intcblock 1
bytecblock 0x746f74616c5f72657761726473 0x636c61696d65645f616d6f756e74 0x7765636f6f705f746f6b656e 0x7265776172645f6379636c65 0x6c696b65 0x

// This TEAL was generated by TEALScript v0.104.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *call_OptIn *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// optInToApplication()void
*abi_route_optInToApplication:
	// execute optInToApplication()void
	callsub optInToApplication
	int 1
	return

// optInToApplication(): void
optInToApplication:
	proto 0 0

	// contracts/WecoopRewards.algo.ts:16
	// this.claimed_amount(this.txn.sender).value = 0
	txn Sender
	byte 0x636c61696d65645f616d6f756e74 // "claimed_amount"
	pushint 0
	app_local_put
	retsub

// bootstrap(pay,uint64)void
*abi_route_bootstrap:
	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// mbrTxn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int 1 // pay
	==

	// argument 1 (mbrTxn) for bootstrap must be a pay transaction
	assert

	// execute bootstrap(pay,uint64)void
	callsub bootstrap
	int 1
	return

// bootstrap(mbrTxn: PayTxn, asset: AssetID): void
bootstrap:
	proto 2 0

	// contracts/WecoopRewards.algo.ts:22
	// assert(this.txn.sender === this.app.creator, 'Error: Not the creator trying to optin to an asset')
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// Error: Not the creator trying to optin to an asset
	assert

	// contracts/WecoopRewards.algo.ts:25
	// assert(mbrTxn.receiver === this.app.address, 'Receiver is not the app address')
	frame_dig -1 // mbrTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// Receiver is not the app address
	assert

	// contracts/WecoopRewards.algo.ts:28
	// assert(!this.app.address.isOptedInToAsset(asset))
	global CurrentApplicationAddress
	frame_dig -2 // asset: AssetID
	asset_holding_get AssetBalance
	swap
	pop
	!
	assert

	// contracts/WecoopRewards.algo.ts:31
	// verifyPayTxn(mbrTxn, { amount: { greaterThanEqualTo: globals.minBalance + globals.assetOptInMinBalance } })
	// verify amount
	frame_dig -1 // mbrTxn: PayTxn
	gtxns Amount
	global MinBalance
	global AssetOptInMinBalance
	+
	>=

	// transaction verification failed: {"txn":"mbrTxn","field":"amount","condition":"greaterThanEqualTo","expected":">=globals.minBalance + globals.assetOptInMinBalance"}
	assert

	// contracts/WecoopRewards.algo.ts:33
	// this.wecoop_token.value = asset
	byte 0x7765636f6f705f746f6b656e // "wecoop_token"
	frame_dig -2 // asset: AssetID
	app_global_put

	// contracts/WecoopRewards.algo.ts:36
	// sendAssetTransfer({ assetReceiver: this.app.address, assetAmount: 0, xferAsset: asset })
	itxn_begin
	pushint 4 // axfer
	itxn_field TypeEnum

	// contracts/WecoopRewards.algo.ts:36
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/WecoopRewards.algo.ts:36
	// assetAmount: 0
	pushint 0
	itxn_field AssetAmount

	// contracts/WecoopRewards.algo.ts:36
	// xferAsset: asset
	frame_dig -2 // asset: AssetID
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	pushint 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// initiateRewardCycle(axfer)void
*abi_route_initiateRewardCycle:
	// axfer: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	pushint 4 // axfer
	==

	// argument 0 (axfer) for initiateRewardCycle must be a axfer transaction
	assert

	// execute initiateRewardCycle(axfer)void
	callsub initiateRewardCycle
	int 1
	return

// initiateRewardCycle(axfer: AssetTransferTxn): void
initiateRewardCycle:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/WecoopRewards.algo.ts:47
	// assert(axfer.xferAsset === this.wecoop_token.value)
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns XferAsset
	byte 0x7765636f6f705f746f6b656e // "wecoop_token"
	app_global_get
	==
	assert

	// contracts/WecoopRewards.algo.ts:50
	// this.reward_cycle.value += 1
	byte 0x7265776172645f6379636c65 // "reward_cycle"
	app_global_get
	int 1
	+
	byte 0x7265776172645f6379636c65 // "reward_cycle"
	swap
	app_global_put

	// contracts/WecoopRewards.algo.ts:53
	// depositedAmount: uint64 = axfer.assetAmount
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns AssetAmount
	frame_bury 0 // depositedAmount: uint64

	// contracts/WecoopRewards.algo.ts:55
	// this.total_rewards.value += depositedAmount
	byte 0x746f74616c5f72657761726473 // "total_rewards"
	app_global_get
	frame_dig 0 // depositedAmount: uint64
	+
	byte 0x746f74616c5f72657761726473 // "total_rewards"
	swap
	app_global_put
	retsub

// createPost(axfer)void
*abi_route_createPost:
	// axfer: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	pushint 4 // axfer
	==

	// argument 0 (axfer) for createPost must be a axfer transaction
	assert

	// execute createPost(axfer)void
	callsub createPost
	int 1
	return

// createPost(axfer: AssetTransferTxn): void
createPost:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/WecoopRewards.algo.ts:67
	// reward: uint64 = this.calculatePostReward('like')
	byte 0x6c696b65 // "like"
	callsub calculatePostReward
	frame_bury 0 // reward: uint64

	// contracts/WecoopRewards.algo.ts:69
	// this.total_rewards.value -= reward
	byte 0x746f74616c5f72657761726473 // "total_rewards"
	app_global_get
	frame_dig 0 // reward: uint64
	-
	byte 0x746f74616c5f72657761726473 // "total_rewards"
	swap
	app_global_put

	// contracts/WecoopRewards.algo.ts:70
	// this.claimed_amount(this.txn.sender).value += reward
	txn Sender
	byte 0x636c61696d65645f616d6f756e74 // "claimed_amount"
	app_local_get
	frame_dig 0 // reward: uint64
	+
	txn Sender
	byte 0x636c61696d65645f616d6f756e74 // "claimed_amount"
	uncover 2
	app_local_put

	// contracts/WecoopRewards.algo.ts:71
	// sendAssetTransfer({ assetReceiver: this.txn.sender, assetAmount: reward, xferAsset: this.wecoop_token.value })
	itxn_begin
	pushint 4 // axfer
	itxn_field TypeEnum

	// contracts/WecoopRewards.algo.ts:71
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/WecoopRewards.algo.ts:71
	// assetAmount: reward
	frame_dig 0 // reward: uint64
	itxn_field AssetAmount

	// contracts/WecoopRewards.algo.ts:71
	// xferAsset: this.wecoop_token.value
	byte 0x7765636f6f705f746f6b656e // "wecoop_token"
	app_global_get
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	pushint 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// calculatePostReward(type: string): uint64
calculatePostReward:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/WecoopRewards.algo.ts:77
	// amount: uint64 = 0
	pushint 0
	frame_bury 0 // amount: uint64

	// *if0_condition
	// contracts/WecoopRewards.algo.ts:79
	// type === 'create'
	frame_dig -1 // type: string
	pushbytes 0x637265617465 // "create"
	==
	bz *if0_elseif1_condition

	// *if0_consequent
	// contracts/WecoopRewards.algo.ts:80
	// amount = 10
	pushint 10
	frame_bury 0 // amount: uint64
	b *if0_end

*if0_elseif1_condition:
	// contracts/WecoopRewards.algo.ts:81
	// type === 'reply'
	frame_dig -1 // type: string
	pushbytes 0x7265706c79 // "reply"
	==
	bz *if0_elseif2_condition

	// *if0_elseif1_consequent
	// contracts/WecoopRewards.algo.ts:82
	// amount = 5
	pushint 5
	frame_bury 0 // amount: uint64
	b *if0_end

*if0_elseif2_condition:
	// contracts/WecoopRewards.algo.ts:83
	// type === 'like'
	frame_dig -1 // type: string
	byte 0x6c696b65 // "like"
	==
	bz *if0_end

	// *if0_elseif2_consequent
	// contracts/WecoopRewards.algo.ts:84
	// amount = 2
	pushint 2
	frame_bury 0 // amount: uint64

*if0_end:
	// contracts/WecoopRewards.algo.ts:87
	// return amount;
	frame_dig 0 // amount: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

*abi_route_createApplication:
	int 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x1e32019a // method "bootstrap(pay,uint64)void"
	pushbytes 0xd20b4150 // method "initiateRewardCycle(axfer)void"
	pushbytes 0xb410b3dd // method "createPost(axfer)void"
	txna ApplicationArgs 0
	match *abi_route_bootstrap *abi_route_initiateRewardCycle *abi_route_createPost

	// this contract does not implement the given ABI method for call NoOp
	err

*call_OptIn:
	pushbytes 0x01a3a3ff // method "optInToApplication()void"
	txna ApplicationArgs 0
	match *abi_route_optInToApplication

	// this contract does not implement the given ABI method for call OptIn
	err